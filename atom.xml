<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iamasd</title>
  <icon>https://www.gravatar.com/avatar/0bbb446669ee6774fed813694880c71f</icon>
  <subtitle>Exploration never stops</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iamasd.cn/"/>
  <updated>2019-12-16T15:47:56.000Z</updated>
  <id>http://www.iamasd.cn/</id>
  
  <author>
    <name>iamasd</name>
    <email>2378155584@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解JVM-----(三)</title>
    <link href="http://www.iamasd.cn/2019/12/15/jvm3/"/>
    <id>http://www.iamasd.cn/2019/12/15/jvm3/</id>
    <published>2019-12-15T11:05:15.000Z</published>
    <updated>2019-12-16T15:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入理解JVM之GC算法"><a href="#深入理解JVM之GC算法" class="headerlink" title="深入理解JVM之GC算法"></a>深入理解JVM之GC算法</h2><h4 id="1-对象存活的判断"><a href="#1-对象存活的判断" class="headerlink" title="1.对象存活的判断"></a>1.对象存活的判断</h4><h5 id="1-1-GC垃圾回收是什么？"><a href="#1-1-GC垃圾回收是什么？" class="headerlink" title="1.1 GC垃圾回收是什么？"></a>1.1 GC垃圾回收是什么？</h5><ul><li>为什么要进行垃圾回收<ul><li>Java语言中一个最显著的特点就是引入了垃圾回机制，使c++中关于内存的诸多问题迎刃而解。由于存在了垃圾回收机制，Java中的对象不再有“作用域”的概念，只有对象的引用才有“作用域”，垃圾回收可以有效的防止内存泄漏，有效的使用空闲的内存</li></ul></li><li>怎么判断对象是否该被GC<ul><li>引用计数法</li><li>可达性分析</li></ul></li></ul><h5 id="1-2-对象存活算法引用计数法"><a href="#1-2-对象存活算法引用计数法" class="headerlink" title="1.2 对象存活算法引用计数法"></a>1.2 对象存活算法引用计数法</h5><ul><li><p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值加1；当引用失效的时候，计数器减1；任何时刻计数器为0的对象就是不可能在被使用的。</p></li><li><p>优缺点</p><ul><li><p>引用计数器收集器可以很快的执行，交织在程序运行中。对程序需要不被长时间打断的实时环境比较有利</p></li><li><p>无法检测出循环引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sq.test;</span></pre></td></tr></table></figure></li></ul></li></ul><p>/**<br>     * @Author: iamasd<br>     * @Description:<br>     * @Date: Created in 18:412019/12/7<br>     */<br>    public class Test1 {</p><pre><code>public Object instance = null;private static final int _1MB = 1024 * 1024;/** * 增加内存，易于观察内存变化 */private byte[] bigSize = new byte[2 * _1MB];</code></pre><p>​<br>        public static void main(String[] args) {</p><pre><code>        Test1 a = new Test1();        Test1 b = new Test1();        a.instance = b;        b.instance = a;        System.gc();    }}</code></pre><p>​<br>    结果：<br>    [GC (System.gc()) [PSYoungGen: 9339K-&gt;4856K(76288K)] 9339K-&gt;4864K(251392K), 0.0021818 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]<br>    [Full GC (System.gc()) [PSYoungGen: 4856K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;4765K(175104K)] 4864K-&gt;4765K(251392K), [Metaspace: 3468K-&gt;3468K(1056768K)], 0.0045306 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]<br>    Heap<br>     PSYoungGen      total 76288K, used 655K [0x000000076b500000, 0x0000000770a00000, 0x00000007c0000000)<br>      eden space 65536K, 1% used [0x000000076b500000,0x000000076b5a3ee8,0x000000076f500000)<br>      from space 10752K, 0% used [0x000000076f500000,0x000000076f500000,0x000000076ff80000)<br>      to   space 10752K, 0% used [0x000000076ff80000,0x000000076ff80000,0x0000000770a00000)<br>     ParOldGen       total 175104K, used 4765K [0x00000006c1e00000, 0x00000006cc900000, 0x000000076b500000)<br>      object space 175104K, 2% used [0x00000006c1e00000,0x00000006c22a7578,0x00000006cc900000)<br>     Metaspace       used 3474K, capacity 4496K, committed 4864K, reserved 1056768K<br>      class space    used 381K, capacity 388K, committed 512K, reserved 1048576K</p><pre><code> PSYoungGen表示使用parallel Scavenge收集器，9339KGC之前的内存使用容量  4856KGC之后内存使用的容量```</code></pre><h5 id="1-3-对象存货算法可达性分析"><a href="#1-3-对象存货算法可达性分析" class="headerlink" title="1.3 对象存货算法可达性分析"></a>1.3 对象存货算法可达性分析</h5><ul><li>可达性分析算法的概念（搜索法）<ul><li>根搜索算法是从离散数学中的图论引入的，程序把所有的引用关系看作是一张图，从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点之后，继续寻找这个节点的引用节点。当所有的引用节点寻找完毕后，剩余的节点则是被认为是没有被引用的节点，即无用的节点</li></ul></li><li>Java中可作为GC ROOT的对象有<ul><li>虚拟机中引用的对象（本地变量表）</li><li>本地方法中的引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li></ul></li></ul><h4 id="2-GC算法"><a href="#2-GC算法" class="headerlink" title="2.GC算法"></a>2.GC算法</h4><h5 id="2-1-标记清除算法"><a href="#2-1-标记清除算法" class="headerlink" title="2.1 标记清除算法"></a>2.1 标记清除算法</h5><ul><li>分为标记和清除两个阶段<ul><li>首先会标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</li><li>不足之处有两点<ul><li>效率问题，两个阶段的效率都不高</li><li>空间问题，在标记清除之后，内存会产生大量不连续的碎片，空间碎片过多可能会导致以后再程序运行过程中需要分配大对象的时候，因为无法分配足够的的连续内存，而又不得不提前出发另一次垃圾收集动作</li></ul></li></ul></li></ul><h5 id="2-2-复制算法"><a href="#2-2-复制算法" class="headerlink" title="2.2 复制算法"></a>2.2 复制算法</h5><ul><li>复制<ul><li>为了解决效率问题，标记复制算法将可用内存按量划分为大小相等的两块，每次只使用其中的一块</li><li>当这一块内存使用完之后，就将还存活着的对象复制到另一块上面，然后把已使用过得内存空间清理掉，这样使得每次都是对整个半区进行内存回收，内存分配时也就不考虑内存碎片等复杂情况，只要移动堆顶的指针，按照顺序分配内存即可。</li></ul></li><li>将内存空间划分为一块较大的Eden空间和两个较小的Survivor空间，每次使用Eden和其中一块Survivor。Survivor from 和Survivor to，内存比例为8：1：1</li><li>当内存进行回收的时候，将Eden和Survivor中还存活的对象和一次性的复制到另一块Survivor的空间上，最后清理掉Eden和刚才使用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8：1，也就是每次新生代可用的内存空间为整个新生代容量的90%（80%+10%），只有10%的内存会被浪费掉。当Survivor内存空间不够的 时候，就需要依赖其他的内存进行分配担保。</li></ul><h5 id="2-3-标记整理算法"><a href="#2-3-标记整理算法" class="headerlink" title="2.3 标记整理算法"></a>2.3 标记整理算法</h5><ul><li>复制算法在对象存活率较高时的时候就要进行较多的复制操作，效率会变得很低。更关键的是，如果不想浪费50%的空间，就需要额外的空间进行分配担保，以应用被使用的内存中所有对象都100%存活的极端情况，所以老年代一般不直接选用复制算法</li><li>标记整理算法，让所有存活的对象向一端移动，让后直接处理掉端边界以外的内存。</li></ul><h5 id="2-4-分代收集算法"><a href="#2-4-分代收集算法" class="headerlink" title="2.4 分代收集算法"></a>2.4 分代收集算法</h5><ul><li>新生代使用复制算法</li><li>老年代<ul><li>标记-清除算法</li><li>标记-整理算法</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      深入理解JVM之GC算法
    
    </summary>
    
    
      <category term="jvm" scheme="http://www.iamasd.cn/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://www.iamasd.cn/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础组件-----@ComponentScan</title>
    <link href="http://www.iamasd.cn/2019/12/11/ComponentScan/"/>
    <id>http://www.iamasd.cn/2019/12/11/ComponentScan/</id>
    <published>2019-12-11T14:05:15.000Z</published>
    <updated>2019-12-11T15:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring基础组件—–-ComponentScan"><a href="#Spring基础组件—–-ComponentScan" class="headerlink" title="Spring基础组件—–@ComponentScan"></a>Spring基础组件—–@ComponentScan</h2><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><ul><li>本篇博文，本着以理解并使用Spring的@ComponentScan扫描类来向IOC容器注入Bean的目的，如果有不正确的地方，还麻烦各位多多指正以下。</li></ul><h3 id="1-ComponentScan"><a href="#1-ComponentScan" class="headerlink" title="1.@ComponentScan"></a>1.@ComponentScan</h3><h4 id="1-1-ComponentScan"><a href="#1-1-ComponentScan" class="headerlink" title="1.1 @ComponentScan"></a>1.1 @ComponentScan</h4><ul><li>@ComponentScan主要就是定义<strong>扫描的路径</strong>从中找出标识了<strong>需要装配</strong>的类自动装配到spring的bean容器中 </li></ul><h4 id="1-2-ComponentScan"><a href="#1-2-ComponentScan" class="headerlink" title="1.2 @ComponentScan"></a>1.2 @ComponentScan</h4><ul><li><p>@ComponentScan注解默认会装配标识了@Controller，@Service，@Repository，@Component注解的类到spring的IOC容器中 </p><ol><li><p>首先在package cn.sq.demo2中新建controller和service包</p></li><li><p>在controller和service包中分别新建一个OrderController类和OrderService类，同时将其各类上注明上相应的@Controller和@Service注解</p></li></ol><p>​       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sq.demo2.controller;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 18:452019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sq.demo2.service;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 18:452019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>在config包下面新建一个MainConfig类，并在其类上使用注解@Configuration声明该类为注解类，同时新增注解@ComponentScan(value = “cn.sq.demo2”)，其中的value的值是要表示，你要扫描的包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"cn.sq.demo2"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 19:402019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo2</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        String[] names = context.getBeanDefinitionNames();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            System.out.println(name);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">结果如下：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">mainConfig</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">orderController</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">orderDao    该bean是我在OrderDao类上添加了<span class="meta">@Repository</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">orderService</span></pre></td></tr></table></figure><p>​     </p></li></ol><h3 id="2-ComponentScan详细配置"><a href="#2-ComponentScan详细配置" class="headerlink" title="2.@ComponentScan详细配置"></a>2.@ComponentScan详细配置</h3><h4 id="2-1-ComponentScan"><a href="#2-1-ComponentScan" class="headerlink" title="2.1 @ComponentScan"></a>2.1 @ComponentScan</h4><ul><li><p>首先，我们看一下ComponentScan的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repeatable</span>(ComponentScans<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ComponentScan</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 对应的包扫描路径 可以是单个路径，也可以是扫描的路径数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"basePackages"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 和value一样是对应的包扫描路径 可以是单个路径，也可以是扫描的路径数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 指定具体的扫描的类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 对应的bean名称的生成器 默认的是BeanNameGenerator</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator<span class="class">.<span class="keyword">class</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 处理检测到的bean的scope范围</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    Class&lt;? extends ScopeMetadataResolver&gt; scopeResolver() <span class="keyword">default</span> AnnotationScopeMetadataResolver<span class="class">.<span class="keyword">class</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 是否为检测到的组件生成代理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="function">ScopedProxyMode <span class="title">scopedProxy</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.DEFAULT</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 控制符合组件检测条件的类文件   默认是包扫描下的  **/</span>*<span class="class">.<span class="keyword">class</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="class">     * @<span class="title">return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="class">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    String resourcePattern() default "**/*.class";</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 是否对带有<span class="doctag">@Component</span> <span class="doctag">@Repository</span> <span class="doctag">@Service</span> <span class="doctag">@Controller</span>注解的类开启检测,默认是开启的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">useDefaultFilters</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 指定某些定义Filter满足条件的组件 FilterType有5种类型如：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     *                                  ANNOTATION, 注解类型 默认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="comment">                                        ASSIGNABLE_TYPE,指定固定类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"><span class="comment">                                        ASPECTJ， ASPECTJ类型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="comment">                                        REGEX,正则表达式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="comment">                                        CUSTOM,自定义类型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    ComponentScan.Filter[] includeFilters() <span class="keyword">default</span> &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 排除某些过来器扫描到的类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    ComponentScan.Filter[] excludeFilters() <span class="keyword">default</span> &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 扫描到的类是都开启懒加载 ，默认是不开启的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">lazyInit</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Target</span>(&#123;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Filter &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">        <span class="function">FilterType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> FilterType.ANNOTATION</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">        <span class="meta">@AliasFor</span>(<span class="string">"classes"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">        Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">        <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">        Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">        String[] pattern() <span class="keyword">default</span> &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul><h4 id="2-2-ComponentScan深入分析"><a href="#2-2-ComponentScan深入分析" class="headerlink" title="2.2 @ComponentScan深入分析"></a>2.2 @ComponentScan深入分析</h4><h5 id="1-basePackageClasses"><a href="#1-basePackageClasses" class="headerlink" title="1.basePackageClasses"></a>1.basePackageClasses</h5><ul><li><p>基于在1节中的代码，我们在MainConfig类中的@ComponentScan注解中加入basePackage Classes ，该值会使得@ComponentScan只去扫描其值对应的类。将其注入到Spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(basePackageClasses = OrderService<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MainConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">结果：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">mainConfig</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">orderService</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">同样，basePackageClasses也支持传入多个类</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(basePackageClasses = &#123;OrderService<span class="class">.<span class="keyword">class</span>, <span class="title">OrderController</span>.<span class="title">class</span>&#125;)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MainConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">结果：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">mainConfig</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">orderService</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">orderController</span></pre></td></tr></table></figure></li></ul><h5 id="2-includeFilters"><a href="#2-includeFilters" class="headerlink" title="2.includeFilters"></a>2.includeFilters</h5><ul><li><p>includeFilters具有过滤功能，是具有包含的关系。所以在使用的时候，需要将useDefaultFilters设置false，不然就会导致过滤效果没有体现出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.根据注解的类型来过滤，例如只允许带有<span class="meta">@Controller</span>注解类的类注册</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"cn.sq.demo2"</span>,includeFilters = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION, classes = &#123;Controller<span class="class">.<span class="keyword">class</span>&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class">        )&#125;,<span class="title">useDefaultFilters</span> </span>= <span class="keyword">false</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">结果：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">mainConfig</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">orderController</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.只允许固定类注册</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"cn.sq.demo2"</span>,includeFilters = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="meta">@ComponentScan</span>.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;OrderService<span class="class">.<span class="keyword">class</span>&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="class">        )&#125;,<span class="title">useDefaultFilters</span> </span>= <span class="keyword">false</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">结果：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">mainConfig</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">orderService</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.自定义注册</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">新建立一个MyTypeFilter并实现TypeFilter，此时MyTypeFilter就可以写条件判断，<span class="keyword">return</span> trun即为执行匹配。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sq.demo2.config;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.type.ClassMetadata;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.TypeFilter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 19:222019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title">TypeFilter</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReader  元数据  读取到当前正在扫描类的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReaderFactory  可以获取到其他任何类的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//获取当前类注解的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//获取当前正在扫秒类的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">        ClassMetadata classMetadata = metadataReader.getClassMetadata();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//获取当前类的资源</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">        Resource resource = metadataReader.getResource();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">        String className = classMetadata.getClassName();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"-========--正在扫描"</span>+className);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//包含er字符匹配成功</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (className.contains(<span class="string">"er"</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">结果：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">mainConfig</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">myTypeFilter</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">orderController</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">orderDao</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">orderService</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">其只扫描到bean中有er的</span></pre></td></tr></table></figure></li></ul><ol start="3"><li><h5 id="excludeFilters"><a href="#excludeFilters" class="headerlink" title="excludeFilters"></a>excludeFilters</h5></li></ol><ul><li>excludeFilters具有过滤功能，是具有排除的关系。所以在使用的时候，需要将useDefaultFilters设置true，不然就会导致过滤效果没有体现出来。</li><li>excludeFilters的操作与includeFilters都相同，此处便不再多啰嗦说明了。</li></ul><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><ul><li><strong>自定扫描路径下边带有@Controller，@Service，@Repository，@Component注解加入spring容器</strong></li><li><strong>通过includeFilters加入扫描路径下没有以上注解的类加入spring容器</strong></li><li><strong>通过excludeFilters过滤出不用加入spring容器的类</strong></li><li><strong>自定义增加了@Component注解的注解方式</strong></li></ul><p>话外直言，本篇博文在过滤类型中，没有说明ASPECTJ， ASPECTJ类型与 REGEX,正则表达式的过滤条件，由于本人未曾使用到过，所以未曾研究下，之后如果遇到便会更新博文，有不足之处，还望海涵。</p><p>推荐一个个人Spring组件精简的博客：</p><ul><li><a href="https://yq.aliyun.com/articles/29137" target="_blank" rel="noopener">https://yq.aliyun.com/articles/29137</a></li><li><a href="https://yq.aliyun.com/users/226fvk6vfzlti?spm=a2c4e.11153940.0.0.122f5995WV9FGD" target="_blank" rel="noopener">https://yq.aliyun.com/users/226fvk6vfzlti?spm=a2c4e.11153940.0.0.122f5995WV9FGD</a></li></ul><p>千里之行始于足下</p>]]></content>
    
    <summary type="html">
    
      理解并使用Spring的@ComponentScan扫描类来向IOC容器注入Bean
    
    </summary>
    
    
      <category term="spring" scheme="http://www.iamasd.cn/categories/spring/"/>
    
    
      <category term="spring" scheme="http://www.iamasd.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM-----(二)</title>
    <link href="http://www.iamasd.cn/2019/12/10/jvm2/"/>
    <id>http://www.iamasd.cn/2019/12/10/jvm2/</id>
    <published>2019-12-10T11:05:15.000Z</published>
    <updated>2019-12-10T13:33:41.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入理解JVM之对象"><a href="#深入理解JVM之对象" class="headerlink" title="深入理解JVM之对象"></a>深入理解JVM之对象</h2><h4 id="1-对象是怎么来的？"><a href="#1-对象是怎么来的？" class="headerlink" title="1.对象是怎么来的？"></a>1.对象是怎么来的？</h4><h5 id="1-1-对象的创建"><a href="#1-1-对象的创建" class="headerlink" title="1.1 对象的创建"></a>1.1 对象的创建</h5><ul><li>对象创建的流程<ul><li>虚拟机遇到一条new指令是，首先会检查这个对应的类能否在常量池中定义到一个类的符号引用</li><li>判断这个类是否已被加载，解析以及初始化</li><li>问这个新对象在Java队中分配内存空间——2种方法<ul><li>指针碰撞</li><li>空闲列表</li></ul></li><li>将分配的内存空间初始化为零值</li><li>设置对象头数据<ul><li>GC分代年龄</li><li>对象的哈希码hashCode</li><li>元数据信息</li></ul></li><li>执行对象方法</li></ul></li></ul><p><img alt data-src="/images/jvm2-1.png" class="lazyload"></p><h5 id="1-2-对象结构"><a href="#1-2-对象结构" class="headerlink" title="1.2 对象结构"></a>1.2 对象结构</h5><ul><li>对象头用于存储对象的元数据信息：<ul><li>Mark Word 部分数据的长度为32bit或64bit，存储对象自身运行时的数据—哈希值等。Mark Word一般被设计为非固定的数据结构，以便于存储更多的数据信息和复用自己的存储空间</li><li>类型指针：指向它的类元数据的指针，用于判断对象属于那个类的实例。</li></ul></li><li>示例数据存储的时真正有效的数据。</li><li>对其填充部分只起到占位符的作用。</li></ul><p><img alt data-src="/images/jvm2-2.png" class="lazyload"></p><h4 id="2-如何访问对象？"><a href="#2-如何访问对象？" class="headerlink" title="2.如何访问对象？"></a>2.如何访问对象？</h4><h5 id="2-1-对象的访问"><a href="#2-1-对象的访问" class="headerlink" title="2.1 对象的访问"></a>2.1 对象的访问</h5><ul><li>在堆上创建一个对象实例之后，就要通过虚拟机栈中的reference类型数据来操作堆上的对象。<ul><li>使用句柄访问</li><li>直接指针访问（HotSpot虚拟机）</li></ul></li></ul><h5 id="2-2-对比"><a href="#2-2-对比" class="headerlink" title="2.2 对比"></a>2.2 对比</h5><ul><li>垃圾回收对比：1中，当垃圾回收移动对象时，reference中存储的地址时稳定的地址，不需要修改，仅需要修改对象句柄的地址；2中，垃圾回收的时候只需要修改reference中存储的地址。</li><li>访问效率分析，2&gt;1,因为2只进行了一次指针定位，节省了时间的开销</li></ul><h4 id="3-注解"><a href="#3-注解" class="headerlink" title="3.注解"></a>3.注解</h4><ul><li><p>指针碰撞</p><ul><li><p>分配内存空间包括开辟一块内存和移动指针两个步骤</p><p>通俗来讲，在一块内存区域中，存在一个指针，当一个对象创建需要内存空间的时候，指针就向未使用的内存移动相应要创建内存大小的位置。它就像一块围墙，将使用与未使用的内存空间隔离。</p></li><li><p>非原子步骤可能会出项并发问题，Java虚拟机采用CAS(乐观锁)配上失败重试的方式来保证更新的操作原子性</p></li></ul></li><li><p>空闲列表</p><ul><li><p>分配内存空间包括开辟一块内存，和修改空闲列表两个步骤。</p><p>分配表相当于一个宿管阿姨的登记表，你要住宿，那就给你登记，分配住房。</p></li><li><p>非原子步骤可能会出项并发问题，Java虚拟机采用CAS(乐观锁)配上失败重试的方式来保证更新的操作原子性</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      深入理解JVM之对象
    
    </summary>
    
    
      <category term="jvm" scheme="http://www.iamasd.cn/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://www.iamasd.cn/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础组件-----@Configuration</title>
    <link href="http://www.iamasd.cn/2019/12/09/Configuration/"/>
    <id>http://www.iamasd.cn/2019/12/09/Configuration/</id>
    <published>2019-12-09T01:05:15.000Z</published>
    <updated>2019-12-09T02:49:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring基础组件—-Configuration"><a href="#Spring基础组件—-Configuration" class="headerlink" title="Spring基础组件—-@Configuration"></a>Spring基础组件—-@Configuration</h2><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><ul><li>本篇博文，本着简易使用以及简易理解的目的，不针对源码进行分析。如果有不正确的地方，还麻烦各位多多指正以下。Bean的注册有6种方式，本文只讨论2种</li></ul><h4 id="1-Bean"><a href="#1-Bean" class="headerlink" title="1.Bean"></a>1.Bean</h4><h5 id="1-1-Spring-XML-创建Bean"><a href="#1-1-Spring-XML-创建Bean" class="headerlink" title="1.1  Spring XML 创建Bean"></a>1.1  Spring XML 创建Bean</h5><ul><li><p>在原始的操作中，我们会使用Spring XML的方式来配置。这样的使用，会使得在之后注册大量的bean，导致XML配置文件膨胀，不利于对象的操作。</p><p>这里先创建一个Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 18:112019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer age;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> age;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                <span class="string">", age="</span> + age +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>接下来是XML文件的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.sq.demo1.Person"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"iamasd"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"18"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure><p>这样的是通过有参构造器，在向IOC容器注册Bean的时候，通过构造器对其属性值进行赋值操作。或者我们可以不通过对象的构造器，将Person中的构造器注释，直接在XML的文件中通过Bean标签中的property标签，对对象内的属性赋值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.sq.demo1.Person"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"iamasd"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>  <span class="attr">value</span>=<span class="string">"18"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure><p>写一个测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 18:512019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo1</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(MainConfig.class);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:application.xml"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        Person person = (Person)context.getBean(<span class="string">"person"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        System.out.println(person);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">结果：Person&#123;name=<span class="string">'iamasd'</span>, age=<span class="number">18</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">以上便是最基础的XML配置，使对象注入到IOC容器中。但是，随着要注册的对象增多，会导致XML文件的臃肿，不推荐使用。</span></pre></td></tr></table></figure></li></ul><h5 id="1-2-Configuration-Bean"><a href="#1-2-Configuration-Bean" class="headerlink" title="1.2 @Configuration+@Bean"></a>1.2 @Configuration+@Bean</h5><ul><li><p>除了第一个方法，我们还可以通过@Configuration这个注解，来表明这是一个配置类， 这个类可以使用Spring IoC容器作为bean定义的来源。 @Bean 注解在该类的方法上，AnnotationConfigApplicationContext将配置类中标注了 @Bean的方法的返回值识别为Spring Bean，并注册到容器中，归入IoC容器管理。其定义意义上上等同于Spring XML文件中的<beans>标签。</p><p>以下是一个简单的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 18:222019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//注册一个bean,返回Person,bean的id默认读取的方法名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"iamasd"</span>,<span class="number">20</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>通过@Configuration和@Bean标签，会将该对象注入到IOC容器中。@Bean中的默认值取该方法名，即person，这相当于&lt;bean id=”person”…&gt;,可以通过@Bean（“xxx”）来自定义beanId值。</p><p>以下是测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 18:512019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo1</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//ApplicationContext context = new ClassPathXmlApplicationContext("classpath:application.xml");</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        Person person = (Person)context.getBean(<span class="string">"person1"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        System.out.println(person);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">结果为：Person&#123;name=<span class="string">'iamasd'</span>, age=<span class="number">20</span>&#125;</span></pre></td></tr></table></figure></li></ul><h4 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h4><ul><li>通过对以上两种注册Bean的方式做了一个简单的描述，通过@Configuration + @Bean的方式更加简便。</li></ul>]]></content>
    
    <summary type="html">
    
      理解并使用Spring的配置类来向IOC容器注入Bean
    
    </summary>
    
    
      <category term="spring" scheme="http://www.iamasd.cn/categories/spring/"/>
    
    
      <category term="spring" scheme="http://www.iamasd.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM-----(一)</title>
    <link href="http://www.iamasd.cn/2019/12/06/jvm1/"/>
    <id>http://www.iamasd.cn/2019/12/06/jvm1/</id>
    <published>2019-12-06T14:05:15.000Z</published>
    <updated>2019-12-06T15:29:20.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深入理解JVM之运行内存模型"><a href="#深入理解JVM之运行内存模型" class="headerlink" title="深入理解JVM之运行内存模型"></a>深入理解JVM之运行内存模型</h3><h4 id="1-Jvm运行时数据区"><a href="#1-Jvm运行时数据区" class="headerlink" title="1.Jvm运行时数据区"></a>1.Jvm运行时数据区</h4><p><img alt data-src="/images/run.jpg" class="lazyload"></p><p>线程共享数据区：方法区    堆</p><p>线程隔离数据区：Java虚拟机栈    本地方法栈  程序计数器</p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><ul><li><p>程序计数器是一块较小的内存空间，看作当前线程所执行的字节码的行号指示器</p></li><li><p>字节码治时期工作时事通过改变计数器的值来选取下一条需要执行的字节码指令，分支，循环，跳转，异常处理，线程回复等基础功能都需要依赖这个计数器来完成</p></li><li><p>内存区域中唯一一个没有规定OutOfMemoryError情况的区域</p></li></ul><p>为什么使用：为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器。</p><h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><p>作用于方法执行的一块区域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: iamasd</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 22:392019/12/6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"进入a"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        a();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"进入b"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        b();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"进入main"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li>打印结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">进入a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">进入b</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">进入main</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Process finished with exit code 0</span></pre></td></tr></table></figure><ul><li>每个方法的执行的同时都会创建一个栈帧用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每一个方法从调用直至执行完成的过程，就对应这一个栈帧再虚拟机栈中入栈到出栈的过程。</li><li>局部变量表存放已知以及对象的引用和可知的基本数据类型</li><li>由于是递归栈操作，会导致栈溢出操作，抛出StackOverflowError</li></ul><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><ul><li>作用域本地方法执行的一块java内存区域</li><li>与Java虚拟机栈相同的操作</li><li>Hotshot将Java虚拟机栈和本地方法栈合二为一</li></ul><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><ul><li>是Java内存区域中一块用来存放对象实例的区域</li><li>Java堆是java虚拟机所管理内存中最大的一块，同时也是被所有线程共享的一块区域</li><li>GC堆</li></ul><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><ul><li>是各个线程共享的区域，它用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据</li><li>类信息：类版本号，方法，接口</li><li>Hotspot使用永久代来实现方法区JRockit，IBM J9vm java堆一样管理这部分内存</li><li>方法区会抛出OutofMemoryError，当他无法满足内存分配</li></ul><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><ul><li>方法区的一部分，用于存放编译器产生各种字面量和符号引用</li><li>方法区会抛出OutofMemoryError，受到方法区内存的限制</li></ul>]]></content>
    
    <summary type="html">
    
      深入理解JVM之运行内存模型
    
    </summary>
    
    
      <category term="jvm" scheme="http://www.iamasd.cn/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://www.iamasd.cn/tags/jvm/"/>
    
  </entry>
  
</feed>
